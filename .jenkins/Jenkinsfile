def arti_instance = "https://conan.jfrog.io/conan"
def credential = "c3i_on_artifactory"
def artifactory_name = "ArtifactoryConan"

def win_tmp_path = "C:/J/c3ipr"
def json_file_path = 'c3i_configs.json'
def repo_name
def current_branch = "${env.BRANCH_NAME}"


def Run(command, sudo=false, returnStatus=false){
    def ret
    if(!isUnix()){
      ret = bat script: command, returnStatus: returnStatus
    }
    else{
      if(sudo){
        command = "sudo " + command
      }
      ret = sh script: command, returnStatus: returnStatus
    }
    return ret
}


def InstallCore(){
   echo "Install c3i core"
   dir(".c3_core") {
       git branch: 'master', url: "https://github.com/lasote/c3i_core.git"
       withPythonEnv("python"){
            Run("pip install -e .")
       }
   }
}


def RunCore(command, arti_instance, credential){
    InstallCore()
    echo "Run c3i core"
    withEnv(["ARTIFACTORY_URL=${arti_instance}"]){
        withCredentials([usernameColonPassword(credentialsId: credential,
                                               variable: 'ARTIFACTORY_CREDENTIALS')]) {
           withPythonEnv("python"){
                Run(command)
           }
        }
    }
}



def Process(build_folder, commit, url, profile, ref, arti_instance, credential, repo_name){
     Run("pip install conan --upgrade --user")
     echo "BUILD FOLDER: ${build_folder}"
     echo "REPOSITORY: ${repo_name}"
     dir(build_folder){
        if(!isUnix()){
           Run("git config --global core.autocrlf false")
        }
        checkout([$class: 'GitSCM', branches: [[name: commit ]], userRemoteConfigs: [[url: url]]])
        writeFile file: "${build_folder}/_profile.txt", text: profile
        def server = Artifactory.newServer url: arti_instance, credentialsId: credential
        def client = Artifactory.newConanClient(userHome: build_folder)
        def remoteName = client.remote.add server: server, repo: repo_name

        withEnv(["CONAN_USER_HOME=${build_folder}"]){
            def install = "conan install ${ref} -pr ${build_folder}/_profile.txt --build never -r ${remoteName}".toString()
            def ret = Run(install, false, true)
            if(ret != 0){
                def create = "conan create ${build_folder} ${ref} -pr ${build_folder}/_profile.txt".toString()
                ret = Run(create, false, true)
                if(ret == 6){
                  echo "Skipping configuration!"
                }
                else if(ret == 0){
                  client.run(command: "remote list")
                  def b = client.run(command: "upload ${ref} -r '${remoteName}' --all -c".toString())
                  server.publishBuildInfo b
                }
                else{
                    throw new Exception("Conan create error ${ret}")
                }
            }
            else{
                echo "Skipping, binary already found in the repository!"
            }
        }
     }

}


if(current_branch == "master"){
    node("Linux"){
        stage("Merge PR packages"){
            sh "pip install virtualenv --user"
            checkout scm
            def commit_message = sh(returnStdout: true, script: 'git show -s --format="format:%s"').trim()
            echo "Commit message: ${commit_message}"
            withEnv(["COMMIT_MESSAGE=${commit_message}"]){ // I'm not able to pass quoted message without failing...
               RunCore("merge_pr", arti_instance, credential)
            }
        }
    }
}
else{
    def the_json
    node("Linux"){
       def c3i_build_number = "${env.BUILD_NUMBER}"
       stage("Calculate builds"){
          checkout scm
          def commit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
          def commit_short = commit.substring(0,7)
          repo_name = "c3i_${env.BRANCH_NAME}_${commit_short}".toString()
          echo "${env.BRANCH_NAME}"
          def basedir = pwd()
          RunCore("calculate_builds ${basedir} ${json_file_path} ${repo_name}", arti_instance, credential)
          the_json = readJSON file: json_file_path
       }
       stage("Create Build Artifactory"){
          RunCore("init_repo ${repo_name} ${c3i_build_number}", arti_instance, credential)
       }
    }

    the_json["stages"].eachWithIndex { group, gix ->
      def builders = [:]
      group.eachWithIndex { conf, cdx ->
         def oss = conf["oss"]
         def commit = conf["commit"].toString()
         def ref = conf["ref"].toString()
         def profile = conf["profile"].toString()
         def profile_id = conf["profile_id"].toString()
         def url = conf["url"].toString()
         def uid = "${env.BRANCH_NAME}_${env.BUILD_NUMBER}_${gix}_${cdx}"

         builders["${oss} - Stage ${gix} - Build ${cdx}"] = {
            node(oss) {
                stage("${oss} - Provision"){
                    // Run("pip install virtualenv --user")
                }
                stage("${oss} - Stage ${gix} - Build ${cdx}"){
                  echo ref
                  echo profile
                  def curdir = pwd().toString()
                  def build_folder = "${curdir}/package_repo/${uid}".toString()
                  if(oss == "Windows"){
                    build_folder = win_tmp_path + "/${uid}"
                  }

                  def env = []
                  if(oss == "Macos"){
                      env = ['PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin']
                  }
                  try{
                      // REMOVE THIS!!!
                      if(profile.contains("Debug")){
                        print("FALLANDO APOSTA")
                        throw new Exception("I made this fail, because I'm evil")
                      }

                      withEnv(env) {
                        if(oss != "c3i-docker"){
                            Process(build_folder, commit, url, profile, ref, arti_instance, credential, repo_name)
                        }
                        else{
                            Process(build_folder, commit, url, profile, ref, arti_instance, credential, repo_name)
                        }
                      }
                      RunCore("set_success ${repo_name} ${profile_id}", arti_instance, credential)
                  }
                  catch(error){
                     RunCore("set_failed ${repo_name} ${profile_id}", arti_instance, credential)
                     throw error
                  }
              }
          }
        }
      }
      parallel builders
    }
}
